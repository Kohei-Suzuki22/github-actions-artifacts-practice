name: Deploy website
on:
  push:
    branches:
      - main
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # 依存関係をインストールする Install dependencies の前で実行する。
        # また、このjob全体が実行し終わった後にも再度実行されるため、
        # 次のステップの npm ciで依存関係が書き変わる場合てもキャッシュとして保存できる。
        #
        # ここで作成したキャッシュは、他のjobやワークフローでも使えるようにcentral cacheとして保存される。
        # 指定したキーが見つからない場合はキャッシュを保存する。
        # 見つかる場合は、指定したパスにキャッシュを復元する。
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          # キャッシュしたいファイル・ディレクトリのパスを指定する。
          # ~/.npmをキャッシュする; https://dev.classmethod.jp/articles/cicd-npm-ci-cache/
          path: ~/.npm
          # keyは、静的な固定文字列を指定するのではなく、以下のように動的なロジックで指定することによって、
          # 依存関係の再インストールが必要かどうかを判断できるようにする。
          # 
          # hashFilesは、指定したファイルたちをハッシュ化する。
          # ここでは、任意のディレクトリのpackage-lock.jsonたちをハッシュ化する。
          # package-log.jsonの中身が変わったら(=依存関係の再インストールが必要)、keyが変わるので存在しないキーで新たに生成される。
          # 新たなキーが指定されると、もともと保存していたkeyのキャッシュは削除される。
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        # npm ciが実行されるときに、~/.nmpにキャッシュが存在していれば、ネットワーク越しにダウンロードするのではなく、キャッシュから取得できる。
        # npm installの場合は、package.jsonから依存関係を解決しようとするため、
        # メジャーバージョンは指定されているがマイナーバージョンは指定されてない場合は、開発環境とCI環境でバージョンの差異が発生する可能性があるため、
        # npm ci を使うことが望ましい。
        # npm ci は、 pakage-lock.jsonを見て依存関係を解決するため、マイナーバージョンまですべて同じで環境を再現されることができる。
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # このjobのoutputsに登録する。
    outputs:
      # idがpublishのstepのbuilded-js-fileという名前のoutputをbuilded-js-fileに登録する。
      builded-js-file: ${{ steps.publish.outputs.builded-js-file  }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # 依存関係をインストールしている場所の前では同様にchacheを作成すること。
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        # execdir: findの対象となった要素それぞれに対して実行できる。
        # execdirは、例えばファイルが対象の場合、そのファイルのあるディレクトリに移動して実行することになる。
        # execは、ディレクトリ移動はせず、findを実行したディレクトリから実行することになる。
        run: find dist/assets/*.js -type f -execdir echo 'builded-js-file={}' >> $GITHUB_OUTPUT ';'

      - name: Upload Artifact
        # artifactをアップロードして、他のjobと共有することができる。
        # アップロードしたファイルを、他のjob上でdownloadすることによって、共有ができる。
        uses: actions/upload-artifact@v3
        with:
          # アップロードする名前
          name: dist-files
          # アップロードする対象のファイルのパス
          path: |
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        # 他のjobでuploadしたartifactを使う場合は、そのuploadのjobがこのjobの前提になるように指定しなければいけない。
        # ※ 並列で実行すると、uploadが完了していないため。
        uses: actions/download-artifact@v3
        with:
          # 指定したartifactは、unzipされて取得できるためそのまま使える。
          name: dist-files
          # pathを指定すれば、任意のディレクトリにダウンロードできる。
          # もしpathを指定しなければ、そのままその場所にダウンロードされる。
          path: dist-folder
      - name: get needs.build.outputs.builded-js-file
        # needs. には、現在のジョブの直接依存関係として定義されたすべてのジョブからの出力が含まれる。
        run: echo "${{ needs.build.outputs.builded-js-file }}"
      - name: ls dist-folder
        run: ls dist-folder
      - name: Deploy
        run: echo "Deploying ..."
