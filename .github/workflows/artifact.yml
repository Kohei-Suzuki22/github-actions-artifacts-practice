name: Deploy website
on:
  push:
    branches:
      - main
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # このjobのoutputsに登録する。
    outputs:
      # idがpublishのstepのbuilded-js-fileという名前のoutputをbuilded-js-fileに登録する。
      builded-js-file: ${{ steps.publish.outputs.builded-js-file  }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        # execdir: findの対象となった要素それぞれに対して実行できる。
        # execdirは、例えばファイルが対象の場合、そのファイルのあるディレクトリに移動して実行することになる。
        # execは、ディレクトリ移動はせず、findを実行したディレクトリから実行することになる。
        run: find dist/assets/*.js -type f -execdir echo 'builded-js-file={}' >> $GITHUB_OUTPUT ';'

      - name: Upload Artifact
        # artifactをアップロードして、他のjobと共有することができる。
        # アップロードしたファイルを、他のjob上でdownloadすることによって、共有ができる。
        uses: actions/upload-artifact@v3
        with:
          # アップロードする名前
          name: dist-files
          # アップロードする対象のファイルのパス
          path: |
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        # 他のjobでuploadしたartifactを使う場合は、そのuploadのjobがこのjobの前提になるように指定しなければいけない。
        # ※ 並列で実行すると、uploadが完了していないため。
        uses: actions/download-artifact@v3
        with:
          # 指定したartifactは、unzipされて取得できるためそのまま使える。
          name: dist-files
          # pathを指定すれば、任意のディレクトリにダウンロードできる。
          # もしpathを指定しなければ、そのままその場所にダウンロードされる。
          path: dist-folder
      - name: ls dist-folder
        run: ls dist-folder
      - name: Deploy
        run: echo "Deploying ..."
